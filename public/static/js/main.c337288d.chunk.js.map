{"version":3,"sources":["store/reducer/goods.ts","store/index.ts","serviceWorker.ts","pages/index.ts","router/index.ts","App.tsx","index.tsx"],"names":["data","list","status","combineReducers","goods","state","action","type","includes","console","log","push","Boolean","window","location","hostname","match","Loading","routes","path","component","Loadable","loader","loading","App","map","route","key","exact","from","to","Component","store","createStore","reducer","compose","applyMiddleware","thunk","logger","subscribe","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNAKIA,EAAgB,CAClBC,KAAK,GACLC,QAAO,GCHMC,cAAgB,CAC7BC,MDKa,WAAqC,IAA3BC,EAA0B,uDAAlBL,EAAMM,EAAY,uCACjD,OAAQA,EAAOC,MACb,IAAK,UAEH,OADCF,EAAMJ,KAAKO,SAASF,EAAON,MAAuCS,QAAQC,IAAI,wCAA3CL,EAAMJ,KAAKU,KAAKL,EAAON,MACpD,eAAIK,GACb,QAAS,OAAOA,M,yBEHAO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8FCfAC,EAAU,kBAAM,MCcPC,EAdA,CAAC,CACdC,KAAM,QACNC,UDAWC,IAAS,CACpBC,OAAQ,kBAAM,qDACdC,QAASN,KCDR,CACDE,KAAM,SACNC,UDCYC,IAAS,CACrBC,OAAQ,kBAAM,4DACdC,QAASN,KCFR,CACDE,KAAM,OACNC,UDEeC,IAAS,CACxBC,OAAQ,kBAAM,+BACdC,QAASN,KCHR,CACDE,KAAM,OACNC,UDGeC,IAAS,CACxBC,OAAQ,kBAAM,+BACdC,QAASN,M,eEgBIO,E,uKAvBX,OACE,kBAAC,IAAD,KAEIN,EAAOO,KAAI,SAAAC,GACT,OACE,kBAAC,IAAD,CACEC,IAAKD,EAAMP,KACXA,KAAMO,EAAMP,KACZC,UAAWM,EAAMN,eAKzB,kBAAC,IAAD,CAAUQ,OAAK,EAACC,KAAK,IAAIC,GAAIZ,EAAO,GAAGC,OAIvC,kBAAC,IAAD,CAAUW,GAAG,c,GAnBHC,a,QCIZC,EAAQC,YACZC,EACAC,YACEC,YAAgBC,KAChBD,YAAgBE,OAIpBN,EAAMO,WAAU,eAEhBC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOZ,UAAWI,MAGtBkB,SAASC,eAAe,SJ6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.c337288d.chunk.js","sourcesContent":["interface dataType{\r\n  list: Array<string>,\r\n  status: boolean\r\n}\r\n\r\nlet data:dataType = {\r\n  list:[],\r\n  status:false,\r\n}\r\n\r\nexport default function (state = data, action:any) {\r\n  switch (action.type) {\r\n    case 'fixList':\r\n      !state.list.includes(action.data) ? state.list.push(action.data) : console.log('已存在该商品')\r\n      return {...state}\r\n    default: return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport goods from './reducer/goods'\r\n\r\nexport default combineReducers({\r\n  goods\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import Loadable from 'react-loadable';\r\n// import Loading from './my-loading-component';\r\n// 意思是在加载的时候 显示 都加载组件没有组件的时候 我们可以写为\r\nconst Loading = () => null;  //加载时不现实loading\r\n\r\nconst Home = Loadable({\r\n  loader: () => import('./home'), //按需加载 点击时只加载一个页面\r\n  loading: Loading,\r\n});\r\nconst Login = Loadable({\r\n  loader: () => import('./login'),\r\n  loading: Loading,\r\n});\r\nconst Error404 = Loadable({\r\n  loader: () => import('../static/error-page/404'),\r\n  loading: Loading\r\n});\r\nconst Error401 = Loadable({\r\n  loader: () => import('../static/error-page/401'),\r\n  loading: Loading\r\n});\r\nexport {\r\n  Home, Login, Error404, Error401\r\n}//将页面导出\r\n","import {\r\n  Home, Login, Error404, Error401\r\n} from '../pages'\r\nconst routes = [{\r\n  path: '/home',\r\n  component: Home\r\n}, {\r\n  path: '/login',\r\n  component: Login\r\n}, {\r\n  path: '/404',\r\n  component: Error404\r\n}, {\r\n  path: '/401',\r\n  component: Error401\r\n},\r\n];\r\nexport default routes\r\n","import React, { Component } from 'react';\r\nimport routes from './router'\r\nimport './App.css'\r\nimport {\r\n  Route,\r\n  Redirect,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return(\r\n      <Switch>\r\n        {\r\n          routes.map(route => {\r\n            return(\r\n              <Route\r\n                key={route.path}\r\n                path={route.path}\r\n                component={route.component}\r\n              />\r\n            )\r\n          })\r\n        }\r\n        <Redirect exact from=\"/\" to={routes[0].path}></Redirect>\r\n        {/* 这里用 redirect 进行 首页自动跳转到 /home 路由下\r\n          exact 意味着精确匹配 当为 / 时才跳转 /home 不是包含 / 就跳转到 /home\r\n        */}\r\n        <Redirect to='/404'></Redirect>\r\n      </Switch>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {Provider} from 'react-redux'\r\nimport {createStore, applyMiddleware, compose} from 'redux'\r\nimport reducer from './store'\r\nimport thunk from 'redux-thunk' // 支持异步 action\r\nimport logger from 'redux-logger'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from 'react-router-dom'\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    applyMiddleware(logger)\r\n  )\r\n)\r\n\r\nstore.subscribe(() => {}) // 监听state变化\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Route component={App}></Route>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}