{"version":3,"sources":["pages/login/logo.png","utils/http.ts","api/login/index.ts","utils/auth.ts","utils/storeUtil.ts","pages/login/index.tsx"],"names":["module","exports","checkStatus","qs","stringify","parse","res","status","message","error","Error","statusText","judgeOkState","a","clone","json","cloneRes","code","msg","handleError","TypeError","data","requestFun","url","params","option","options","Object","assign","method","body","JSON","type","FormData","keys","key","append","http","staticFetch","defaultOptions","credentials","mode","headers","token","Authorization","sessionStorage","getItem","newOptions","fetch","then","catch","post","get","put","userLogin","request","TokenKey","setToken","name","Cookies","set","setStore","content","obj","dataType","datetime","Date","getTime","window","setItem","Login","history","useHistory","useEffect","TabPane","Tabs","useState","user","setUser","pwd","setPwd","onFinish","values","md5","push","className","src","ImgLogo","alt","defaultActiveKey","tabPosition","onChange","animated","tab","Item","rules","required","e","target","value","prefix","UserOutlined","placeholder","LockOutlined","htmlType","console","log","MailOutlined"],"mappings":"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","file":"static/js/6.b3545a73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba577c9d.png\";","\r\n/*\r\n* 请求方法\r\n*/\r\nimport qs from 'qs'\r\nimport {message} from 'antd'\r\n\r\nconst {stringify, parse} = qs\r\n\r\ninterface resObject {\r\n  status: number,\r\n  statusText: string,\r\n  clone: any\r\n}\r\nconst checkStatus = (res:resObject) => {\r\n  if(res.status >= 200 && res.status < 300) {\r\n    return res\r\n  }\r\n  message.error(`网络请求失败,${res.status}`)\r\n  throw new Error(res.statusText)\r\n}\r\n\r\n\r\n/*\r\n*  捕获成功登录过期状态码等\r\n*  @params res\r\n*  @return {*}\r\n*/\r\nconst judgeOkState = async (res:any) => {\r\n  const cloneRes = await res.clone().json()\r\n  //  TODO: 可以在这管控全局请求\r\n  if(cloneRes.code !== 1) {\r\n    message.error(`${cloneRes.msg}， code:${cloneRes.code}`)\r\n    throw new Error(cloneRes.msg)\r\n  } else {\r\n    return res\r\n  }\r\n}\r\n\r\n/**\r\n * 捕获失败\r\n * @param error\r\n */\r\nconst handleError = (error:object) => {\r\n  if (error instanceof TypeError) {\r\n    message.error(`网络请求失败啦！${error}`);\r\n  }\r\n  return {   //防止页面崩溃，因为每个接口都有判断res.code以及data\r\n    code: -1,\r\n    data: false,\r\n  };\r\n};\r\n\r\n// 请求类\r\nclass http {\r\n  /**\r\n   *静态的fetch请求通用方法\r\n   * @param url\r\n   * @param options\r\n   * @returns {Promise<unknown>}\r\n   */\r\n  static async staticFetch(url = '', options:any = {}) {\r\n\r\n    const defaultOptions:any = {\r\n      /*允许携带cookies*/\r\n      credentials: 'include',\r\n      /*允许跨域**/\r\n      mode: 'cors',\r\n      headers: {\r\n        token: null,\r\n        Authorization: sessionStorage.getItem('access_token'),\r\n        // 当请求方法是POST，如果不指定content-type是其他类型的话，默认为如下↓，要求参数传递样式为 key1=value1&key2=value2，但实际场景以json为多\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n    };\r\n    if (options === 'POST' || 'PUT') {\r\n      defaultOptions.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    }\r\n    const newOptions = { ...defaultOptions, ...options };\r\n    return fetch(url, newOptions)\r\n      .then(checkStatus)\r\n      .then(judgeOkState)\r\n      .then((res:any) => res.json())\r\n      .catch(handleError);\r\n  }\r\n\r\n  /**\r\n   *post请求方式\r\n   * @param url\r\n   * @param params\r\n   * @param option\r\n   * @returns {Promise<unknown>}\r\n   */\r\n  post(url:string, params = {}, option:any = {}) {\r\n    const options = Object.assign({ method: 'POST' }, option);\r\n    //一般我们常用场景用的是json，所以需要在headers加Content-Type类型\r\n    options.body = JSON.stringify(params);\r\n\r\n    //可以是上传键值对形式，也可以是文件，使用append创造键值对数据\r\n    if (options.type === 'FormData' && options.body !== 'undefined') {\r\n      let params = new FormData();\r\n      for (let key of Object.keys(options.body)) {\r\n        params.append(key, options.body[key]);\r\n      }\r\n      options.body = params;\r\n    }\r\n    return http.staticFetch(url, options); //类的静态方法只能通过类本身调用\r\n  }\r\n\r\n  /**\r\n   * put方法\r\n   * @param url\r\n   * @param params\r\n   * @param option\r\n   * @returns {Promise<unknown>}\r\n   */\r\n  put(url:string, params = {}, option:any = {}) {\r\n    const options = Object.assign({ method: 'PUT' }, option);\r\n    options.body = JSON.stringify(params);\r\n    return http.staticFetch(url, options); //类的静态方法只能通过类本身调用\r\n  }\r\n\r\n  /**\r\n   * get请求方式\r\n   * @param url\r\n   * @param option\r\n   */\r\n  get(url:string, option = {}) {\r\n    const options = Object.assign({ method: 'GET' }, option);\r\n    return http.staticFetch(url, options);\r\n  }\r\n}\r\n\r\nconst requestFun = new http(); //new生成实例\r\nexport const { post, get, put } = requestFun;\r\nexport default requestFun;\r\n","import request from '../../utils/http'\r\n\r\nexport async function userLogin(params:any){\r\n  return request.post('/api/login', params)\r\n}\r\n","import Cookies from 'js-cookie'\r\nconst TokenKey = 'access-token'\r\n\r\nexport function getToken (name = TokenKey) {\r\n  return Cookies.get(name)\r\n}\r\n\r\nexport function setToken (token:string, name = TokenKey) {\r\n  return Cookies.set(name, token)\r\n}\r\n\r\nexport function removeToken (name = TokenKey) {\r\n  return Cookies.remove(name)\r\n}\r\n","export function validatenull (val:any) {\r\n  if (typeof val === 'boolean') {\r\n    return false\r\n  }\r\n  if (typeof val === 'number') {\r\n    return false\r\n  }\r\n  if (val instanceof Array) {\r\n    if (val.length === 0) return true\r\n  } else if (val instanceof Object) {\r\n    if (JSON.stringify(val) === '{}') return true\r\n  } else {\r\n    return val === 'null' ||\r\n      val == null ||\r\n      val === 'undefined' ||\r\n      val === undefined ||\r\n      val === ''\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * 存储Storage\r\n */\r\nexport const setStore = (params:any) => {\r\n  let { name, content} = params\r\n  let obj = {\r\n    dataType: typeof content,\r\n    content: content,\r\n    datetime: new Date().getTime()\r\n  }\r\n  window.sessionStorage.setItem(name, JSON.stringify(obj))\r\n}\r\n/**\r\n * 获取Storage\r\n */\r\n\r\nexport const getStore = (params:any) => {\r\n  let { name } = params\r\n  let obj:any = {}\r\n  let content\r\n  obj = window.sessionStorage.getItem(name)\r\n  if (validatenull(obj)) return\r\n  obj = JSON.parse(obj)\r\n  if (obj.dataType === 'string') {\r\n    content = obj.content\r\n  } else if (obj.dataType === 'number') {\r\n    content = Number(obj.content)\r\n  } else if (obj.dataType === 'boolean') {\r\n    content = obj.content\r\n  } else if (obj.dataType === 'object') {\r\n    content = obj.content\r\n  }\r\n  return content\r\n}\r\n/**\r\n * 删除localStorage\r\n */\r\nexport const removeStore = (params:any) => {\r\n  let { name } = params\r\n  window.sessionStorage.removeItem(name)\r\n}\r\n\r\n\r\n\r\n/**\r\n * 清空全部localStorage\r\n */\r\nexport const clearStore = (params:any) => {\r\n  let { type } = params\r\n  if (type) {\r\n    window.sessionStorage.clear()\r\n    return\r\n  }\r\n  window.localStorage.clear()\r\n}\r\n","import React, { FC, useEffect,useState } from 'react';\r\nimport { Button, Tabs, Form, Input } from 'antd';\r\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\r\nimport {useHistory} from 'react-router-dom'\r\nimport './index.scss';\r\nimport ImgLogo from './logo.png'\r\nimport {userLogin} from '../../api/login'\r\nimport {setToken} from '../../utils/auth'\r\nimport {setStore} from '../../utils/storeUtil'\r\nimport md5 from 'md5'\r\n\r\n\r\nconst Login: FC = () => {\r\n  let history = useHistory()\r\n  useEffect(() => {\r\n  })\r\n    // ant组件\r\n  const { TabPane } = Tabs;\r\n    // 变量集\r\n  const [data, setData] = useState<string>('1');\r\n  const [user, setUser] = useState<string>('');\r\n  const [pwd, setPwd] = useState<string>('')\r\n  // 方法集\r\n  const callback = ()=>{\r\n  }\r\n  const onFinish = async (values:any) => {\r\n    const res = await userLogin({name: user, pwd: md5(pwd)})\r\n    if (res.code !== 1) {\r\n      return;\r\n    }\r\n    setToken(res.data)\r\n    setStore({\r\n      name: 'access-token',\r\n      content: res.data\r\n    })\r\n    history.push('/home')\r\n  };\r\n  const onFinishRegister = (values:any) => {\r\n    console.log('Received values of form: ', values);\r\n    history.push('/home')\r\n  };\r\n  const handleUserChange = (e:any) => {\r\n    setUser(e.target.value)\r\n  }\r\n  const handlePwdChange = (e: any) => {\r\n    setPwd(e.target.value)\r\n  }\r\n  return (\r\n      <div className=\"page\">\r\n        <div className=\"bg-img\">\r\n          <div className=\"m-bg-mask m-bg-mask0\"></div>\r\n          <div className=\"m-bg-mask m-bg-mask1\"></div>\r\n          <div className=\"m-bg-mask m-bg-mask2\"></div>\r\n          <div className=\"m-bg-mask m-bg-mask3\"></div>\r\n        </div>\r\n        <div className=\"form-box\">\r\n            <div className=\"login-logo\">\r\n                <img src={ImgLogo} alt=\"\"/>\r\n            </div>\r\n            <Tabs defaultActiveKey={data} tabPosition={'top'} onChange={callback} className=\"tabs\" animated={true}>\r\n                <TabPane tab=\"登录\" key=\"1\">\r\n                    <Form\r\n                        name=\"login\"\r\n                        className=\"login-form\"\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"user\"\r\n                            rules={[{ required: true, message: '请输入用户名！' }]}\r\n                        >\r\n                            <Input onChange={handleUserChange} prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"用户名\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"pwd\"\r\n                            rules={[{ required: true, message: '请输入密码' }]}\r\n                        >\r\n                            <Input\r\n                              onChange={handlePwdChange}\r\n                              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                              type=\"password\"\r\n                              placeholder=\"密码\"\r\n                            />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            登 录\r\n                        </Button>\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane tab=\"注册\" key=\"2\">\r\n                    <Form\r\n                        name=\"login\"\r\n                        className=\"register-form\"\r\n                        onFinish={onFinishRegister}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[{ required: true, message: 'Please input your Username!' }]}\r\n                        >\r\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"emil\"\r\n                            rules={[{ required: true, message: '请输入邮箱' }]}\r\n                        >\r\n                            <Input prefix={<MailOutlined className=\"site-form-item-icon\"/>} placeholder=\"请输入邮箱\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"pwd\"\r\n                            rules={[{ required: true, message: '请输入密码！' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"请输入密码\"\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"surePwd\"\r\n                            rules={[{ required: true, message: '请再次输入密码' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"确认密码\"\r\n                            />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            注 册\r\n                        </Button>\r\n                    </Form>\r\n                </TabPane>\r\n            </Tabs>\r\n        </div>\r\n      </div>\r\n\r\n  )\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}